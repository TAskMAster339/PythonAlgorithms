11) H-Index
https://leetcode.com/problems/h-index/description/
     Идея: посчитать все h-индексы и вернуть наибольший из них.
     Сначала мы создадим массив h_indexes, длина которого будет на 1 больше, чем длина массива citations. Теперь мы пройдемся по массиву с цитатами, заполняя массив h_indexes, индексы в данном массиве - это все возможные h индексы, которые в теории можно получить из входного массива цитат. Так как может возникнуть ситуация, что например в массиве цитат: [100, 300, 200] h индекс равен 3, так как длина массива 3, которая является верхней границей h индекса, поэтому нам совершенно не важно количество цитат, если их количество превышает длину массива. Поэтому все работы с количеством цитат больше чем длина массива цитат, мы записываем их в последнюю ячейку массива h_indexes.
     После этого цикла, мы создаем переменную states, в которой динамически будем считать количество статей. Затем мы проходим по массива h_indexes с помощью итератора h с конца так как нам нужно найти наибольший h индекс. Как только количество статей станет больше или равным h (итератор h, который находится в пределах от 0 до len(citations)), то это значит, что мы нашли искомый h индекс. При том такой индекс будет всегда найден, так как в последней итерации h == 0, очевидно, количество статей, всегда будет более или равно 0.
     Сложность алгоритма O(N), также нужно будет хранить массив h индексов, поэтому потребуется память O(N).
