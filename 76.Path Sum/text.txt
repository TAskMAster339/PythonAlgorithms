76) Path Sum
https://leetcode.com/problems/path-sum/description/
Условие:
Дан корень root бинарного дерева и число targetSum, нужно вернуть True, если в дереве есть путь от корня до листа, в котором сумма значений val входящих в него узлов равна targetSum.
Лист - узел без детей.
Идея:
DFS, DFS, DFS!!!
Реализация:
    Простая рекурсия. Сумма пути от корня до листа равна значению val корня плюс сумма пути от корня поддерева до листа.
    Крайний случай если root это None, то возвращаем False. А если root это лист, то мы возвращаем targetSum == root.val.
    А в рекуррентном случае мы будем вызывать нашу же функцию для левого и правого поддерева соответственно. При этом мы будем передавать в эти функции targetSum - root.val
    В конце возвращаем логическое или результатов поиска суммы пути в поддеревьях.

Оценка:
    Классический DFS по времени займет у нас O(N), где N - количество узлов в дереве. При этом в среднем он может быть быстрее, так как логическое или в Python ленивое, то есть есть вероятность, что мы найдем путь где-то в начале, тогда все оставшиеся пути вычислены не будут. По памяти мы потратим O(N), необходимый для рекурсии стек.