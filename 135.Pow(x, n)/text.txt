135) Pow(x, n)
https://leetcode.com/problems/powx-n/description/
Условие:
Необходимо реализовать функцию std::pow(x, n), которая возводит число x в степень n. При этом x - рациональное число, а n - целое число.
Идея:
Проще всего воспользоваться рекурсией, но учитывая, что n целое, то можно побыстрей
Реализация:
    Важно, так n целое, то мы можем использовать данное решение.
    Наше решение будет основываться на битах, с помощью них мы будем быстро возводить в степень. Например, возведем число 5 в 7 степень. Число 7 в бинарном системе имеет вид 0111. Вспомним, про полную запись числа: 7 = 0 * 2^3 + 1 * 2^2 + 1 * 2^1 + 1 * 2^0, где 2 - основание системы счисления. Теперь обратим внимание на степенные коэффициенты перед единицами: 4, 2, 1. Их сумма равна 7. Поэтому мы можем представить искомую степень в виде произведения точных степеней двоек: 5^7 = 5^(4 + 2 + 1) = 5^4 * 5^2 * 5^1.
    С помощью цифр бинарной записи числа n мы можем очень легко посчитать необходимые нам степени x.
    Создадим переменную result = 1, её мы в конце вернем. Пока n > 0 мы будем делать следующие действия: Каждую итерацию мы будем возводить x в квадрат (Мы ранее показали, что x^n можно представить как произведение чисел x^k, где k - точная степень двойки), до этого проверим равна ли последняя цифра числа n единице, если да, то мы должны result умножить на x, в который уже может представлять x в какой-то точной степени двойки. В конце итерации сдвигаем n на один бит вправо.
    Таким циклом мы динамически посчитаем искомую степень. Например, для 5^7, мы вычислим, что она равна 5 * 25 * 625.
    Остается учесть отрицательные n, в данном случае мы просто сделаем рокировку: n = -n, x = 1 / x, и далее уже по нашему алгоритму.

Оценка:
    Сложность по времени будет O(1), так как цикл в наихудшем случае пройдет по всем 64 битам числа N, что всегда будет константно.
    Сложность по памяти будет O(1).