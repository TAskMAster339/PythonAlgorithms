13) Gas Station
https://leetcode.com/problems/gas-station/description/
Условие:
     Есть n заправочный станций, расположенных вдоль круговой дороги (gas). На каждой i-той станции есть gas[i] топлива. У вас есть машина с безлимитным топлевным баком и есть массив cost, в котором хранится количество топлива, которое необходимо потратить, чтобы добраться с i-той станции до i+1-станции. Мы начинаем с пустым баком. Необходимо найти индекс станции, начиная с которой, мы сможем проехать один круг по часовой стрелки. Если это сделать невозможно, то нужно вернуть -1, также нам гарантируется, что если решение есть, то оно единственное.
Идея:
     Нужно динамически проверять каждую станцию, пока у нас есть еще топливо.
Реализация:
     Создадим три переменные fuel, которая будет использоваться для подсчета топлива, count необходим для проверки того прошли ли мы один круг, result - индекс, который будем возвращать если смогли пройти круг.
     Главная идея состоит в том, чтобы развернуть этот круг в прямую линию, её длина будет в два раза больше длины круга. Это необходимо, чтобы из каждой станции, находящийся на круге мы могли пройти "по прямой" до этой же станции, тоесть пройти круг. Чтобы не использовать лишней памяти и при этом развернуть круг в прямую, все используемые индексы нужно будет брать по модулю len(gas).
     Каждую итерацию цикла мы будем добавлять топливо, которое рассчитывается следующим образом: топливо, которое есть на этой заправке минус топливо, необходимое, чтобы доехать до следующей. Если топливо получилось отрицательным, то это значит, что мы не можем с этой станции проехать круг, обнуляем топливо, предполагаем, что ответ это i + 1, тоесть следующая станция, обнуляем наш счетчик.
     Счетчик у нас прибавляется каждую итерацию когда топливо больше или равно 0, это значит, что мы можем проехать на 1 станцию вперед. Когда топливо меньше нуля счетчик обнуляем. Если счетчки досчитал до len(gas), это значит, что мы проехали круг, поэтому нам остается вернуть result. Если в цикле мы ни разу не дошли до return, значит ответа нет, поэтому после цикла возвращаем -1.
Оценка:
     Так как мы проходим циклов for по промежутку N * 2, то затраченное время будет равно O(N), память будет затрачена O(1). 
     Тут можно схитрить и ускорить алгоритм по времени, если воспользоваться следующий идеей. Так как условие гарантирует нам при наличии решение его уникальность, то мы можем не проверять строго, каждую станцию.
     В начале мы с помощью цикла for пробежимся в range(0, len(gas)), будем динамически считать топливо, не обращая внимание на его знак. Тогда этот круг, начинающийся и заканчивающийся 0 станцией, имеет ли задача решение. Если после прохода у нас будет топлива >= 0, то есть такая станция, начиная с которой, мы сможем проехать полный круг.(Предлагаю доказать это самостоятельно). Тогда нам остается найти ее, используя ранее реализованный алгоритм, но теперь мы пройдем range(len(gas)) и всё, что связанно с count убирается.
     